!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="../docs/",n(n.s=265)}({25:function(e,t){e.exports={BASE_URL:"https://todo-pwa-backend.herokuapp.com"}},265:function(e,t,n){const o="static-v1556482839.363",r=["bundle.js","index.html","manifest.json","favicon.png","."],a=n(266),{onlineHandler:i,offlineHandler:s}=n(268),{BASE_URL:c}=n(25),u=new Response("<div><h2>You are offline</h2></div>",{headers:{"Content-type":"text/html"}});self.addEventListener("install",function(e){e.waitUntil(caches.open(o).then(function(e){return e.addAll(r).then(()=>self.skipWaiting())}))}),self.onactivate=(e=>{console.log(`on activate - ${o}`),e.waitUntil(caches.keys().then(e=>{const t=e.map(e=>(console.log(e),e!=o?caches.delete(e):Promise.resolve()));return Promise.all(t)})),self.clients.claim()}),self.onfetch=(e=>{e.respondWith((async()=>{const t=new URL(e.request.url).pathname;if(t.includes("list")||t.includes("add"))return await a(e.request);const n=await caches.match(e.request);return n||(!navigator.onLine&&(e=>e.toString().toLowerCase().includes(".html"))(e.request.url)?u:await fetch(e.request))})())}),self.addEventListener("message",e=>{"online"===e.data&&i(),"offline"===e.data&&s()})},266:function(e,t,n){const{updateList:o,getList:r,addTodoOffline:a,getUnadded:i}=n(95);e.exports=(async e=>{const t=e.url.toString();return t.includes("list")?await(async e=>{try{const t=await fetch(e),n=t.clone(),a=(await n.json()).todos.map(e=>e.todo);return await o(a),t}catch(e){const t=await r(),n=await i(),o=[...t,...n].map(e=>({todo:e})),a=new Blob([JSON.stringify({todos:o})],{type:"application/json"});return new Response(a)}})(e):t.includes("add")?await(async e=>{const t=e.clone();try{return await fetch(e)}catch(e){const n=await t.json();console.log("request",n);const o=await n.newTodo;await a(o);const r=new Blob([JSON.stringify({newTodo:o})],{type:"application/json"});return new Response(r)}})(e):void 0})},267:function(e,t,n){"use strict";n.r(t),n.d(t,"Store",function(){return o}),n.d(t,"get",function(){return i}),n.d(t,"set",function(){return s}),n.d(t,"del",function(){return c}),n.d(t,"clear",function(){return u}),n.d(t,"keys",function(){return d});class o{constructor(e="keyval-store",t="keyval"){this.storeName=t,this._dbp=new Promise((n,o)=>{const r=indexedDB.open(e,1);r.onerror=(()=>o(r.error)),r.onsuccess=(()=>n(r.result)),r.onupgradeneeded=(()=>{r.result.createObjectStore(t)})})}_withIDBStore(e,t){return this._dbp.then(n=>new Promise((o,r)=>{const a=n.transaction(this.storeName,e);a.oncomplete=(()=>o()),a.onabort=a.onerror=(()=>r(a.error)),t(a.objectStore(this.storeName))}))}}let r;function a(){return r||(r=new o),r}function i(e,t=a()){let n;return t._withIDBStore("readonly",t=>{n=t.get(e)}).then(()=>n.result)}function s(e,t,n=a()){return n._withIDBStore("readwrite",n=>{n.put(t,e)})}function c(e,t=a()){return t._withIDBStore("readwrite",t=>{t.delete(e)})}function u(e=a()){return e._withIDBStore("readwrite",e=>{e.clear()})}function d(e=a()){const t=[];return e._withIDBStore("readonly",e=>{(e.openKeyCursor||e.openCursor).call(e).onsuccess=function(){this.result&&(t.push(this.result.key),this.result.continue())}}).then(()=>t)}},268:function(e,t,n){const{getUnadded:o,resetUnadded:r}=n(95),{BASE_URL:a}=n(25);e.exports={offlineHandler:()=>{},onlineHandler:async()=>{const e=await o();await Promise.all(e.map(async e=>await fetch(a+"/add",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({newTodo:e})}).catch(console.log))),await r()}}},95:function(e,t,n){const{set:o,get:r}=n(267);e.exports={updateList:async e=>{await o("todo-list",e)},getList:async()=>{return await r("todo-list")},addTodoOffline:async e=>{const t=await r("offline-adds");await o("offline-adds",[...t||[],e])},getUnadded:async()=>{const e=await r("offline-adds");return e||[]},resetUnadded:async()=>{await o("offline-adds",[])}}}});